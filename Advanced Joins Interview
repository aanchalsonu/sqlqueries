Samantha interviews many candidates from different colleges using coding challenges and contests. Write a query to print the contest_id, hacker_id, name, and the sums of total_submissions, total_accepted_submissions, total_views, and total_unique_views for each contest sorted by contest_id. Exclude the contest from the result if all four sums are .

Note: A specific contest can be used to screen candidates at more than one college, but each college only holds  screening contest.

Input Format

The following tables hold interview data:

Contests: The contest_id is the id of the contest, hacker_id is the id of the hacker who created the contest, and name is the name of the hacker.

Colleges: The college_id is the id of the college, and contest_id is the id of the contest that Samantha used to screen the candidates.

Challenges: The challenge_id is the id of the challenge that belongs to one of the contests whose contest_id Samantha forgot, and college_id is the id of the college where the challenge was given to candidates.

View_Stats: The challenge_id is the id of the challenge, total_views is the number of times the challenge was viewed by candidates, and total_unique_views is the number of times the challenge was viewed by unique candidates.

Submission_Stats: The challenge_id is the id of the challenge, total_submissions is the number of submissions for the challenge, and total_accepted_submission is the number of submissions that achieved full scores.

Sample Input

Contests Table:Colleges Table:Challenges Table:View_Stats Table:Submission_Stats Table:

Sample Output

66406 17973 Rose 111 39 156 56
66556 79153 Angela 0 0 11 10
94828 80275 Frank 150 38 41 15
Explanation

The contest  is used in the college . In this college , challenges  and  are asked, so from the view and submission stats:

Sum of total submissions 

Sum of total accepted submissions


WITH
vieu AS (
    SELECT colg.contest_id,
           SUM(vs.total_views) AS tv,
           SUM(vs.total_unique_views) AS tuv
    FROM Colleges colg
    JOIN Challenges chal
    ON chal.college_id = colg.college_id
    JOIN View_Stats vs
    ON vs.challenge_id = chal.challenge_id
    GROUP BY colg.contest_id
),
submission AS (
    SELECT colg.contest_id,
           SUM(ss.total_submissions) AS ts,
           SUM(ss.total_accepted_submissions) AS tas
    FROM Colleges colg
    JOIN Challenges chal
    ON chal.college_id = colg.college_id
    JOIN Submission_Stats ss
    ON ss.challenge_id = chal.challenge_id
    GROUP BY colg.contest_id
)

SELECT cont.*,
       s.ts, s.tas,
       v.tv, v.tuv
FROM Contests cont
JOIN vieu v
ON v.contest_id = cont.contest_id
JOIN submission s
ON s.contest_id = v.contest_id
WHERE s.ts != 0 OR
      s.tas != 0 OR
      v.tv != 0 OR
      v.tuv != 0
ORDER BY cont.contest_id

Sum of total views 

Sum of total unique views 

Similarly, we can find the sums for contests  and .
